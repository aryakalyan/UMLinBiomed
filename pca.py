# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rn_60w9IxN5vsB30sbry9BrD5nRIpMyJ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Load dataset
url = "https://github.com/aryakalyan/UMLinBiomed/blob/8b2adaec1676d475ed3f1563a116aac4d9124aca/CellLines_52samples.txt"
df = pd.read_csv(url, sep="\t", index_col=0)

# Extract Group labels and drop 'Group' row
group_labels = df.loc["Group"]
df_numeric = df.drop(index="Group")

# Convert data to numeric values
df_numeric = df_numeric.apply(pd.to_numeric)

# Transpose the dataset (samples as rows, genes as columns)
df_transposed = df_numeric.T

# Standardize data (mean=0, variance=1)
scaler = StandardScaler()
data_scaled = scaler.fit_transform(df_transposed)

# Perform PCA (retain top 3 components)
pca = PCA(n_components=3)
principal_components = pca.fit_transform(data_scaled)

# Convert PCA results into a DataFrame
pca_df = pd.DataFrame(principal_components, columns=['PC1', 'PC2', 'PC3'], index=df_transposed.index)
pca_df["Group"] = group_labels.values

# Print explained variance ratio
explained_variance = pca.explained_variance_ratio_ * 100
print("\nExplained Variance Ratio:", explained_variance)

# 2D PCA Scatter Plot (PC1 vs PC2) with Correct Orientation ###
pc_combinations = [("PC1", "PC2"), ("PC1", "PC3"), ("PC2", "PC3")]

# Generate and show plots in a loop
for x_pc, y_pc in pc_combinations:
    fig = px.scatter(
        pca_df, x=x_pc, y=y_pc, color="Group",
        labels={x_pc: f"{x_pc} ({explained_variance[int(x_pc[-1]) - 1]:.2f}%)",
                y_pc: f"{y_pc} ({explained_variance[int(y_pc[-1]) - 1]:.2f}%)"},
        title=f"PCA of Cell Line Expression Data ({x_pc} vs {y_pc})",
        width=1200, height=500
    )
    fig.show()

# 3D PCA Scatter Plot (PC1, PC2, PC3) with Corrected Orientation ###
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

# Assign colors based on unique groups
unique_groups = pca_df["Group"].unique()
colors = sns.color_palette("husl", len(unique_groups))
group_color_map = {group: colors[i] for i, group in enumerate(unique_groups)}

# Plot each sample
for group in unique_groups:
    subset = pca_df[pca_df["Group"] == group]
    ax.scatter(subset["PC1"], subset["PC2"], subset["PC3"], label=group, color=group_color_map[group])

ax.set_xlabel(f"PC1 ({explained_variance[0]:.2f}%)")
ax.set_ylabel(f"PC2 ({explained_variance[1]:.2f}%)")
ax.set_zlabel(f"PC3 ({explained_variance[2]:.2f}%)")
ax.set_title("3D PCA Plot of Cell Line Expression Data")
ax.legend(loc="best")

# Flip Y-axis to match required results
ax.view_init(elev=10, azim=180)  # Adjusting angle for correct orientation

# Save the plot
plt.savefig("PCA_plots.pdf", format="pdf")
plt.show()
